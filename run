#! /bin/bash
#
# Flywheel 2017
#
#


################################################################################
# DEFINE VARIABLES

FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
INPUT_DIR=$FLYWHEEL_BASE/input
GEAR_OUTPUT_DIR=$FLYWHEEL_BASE/output
WORKING_DIR=$GEAR_OUTPUT_DIR/work/
CONTAINER='[flywheel/xcpengine]'
XCP_OUTPUT_DIR=$GEAR_OUTPUT_DIR/
FMRIPREPDIR=$INPUT_DIR/fmriprepdir
IMG=$INPUT_DIR/img
M0=$INPUT_DIR/m0
STRUCT=$INPUT_DIR/struct
DESIGNFILE=$INPUT_DIR/designfile


################################################################################
# DISPLAY XCPENGINE DOCKERFILE FOR BUILD INFO

echo -e "$CONTAINER BEGIN XCPENGINE DOCKERFILE\n"
cat ${FLYWHEEL_BASE}/*Dockerfile
echo -e "$CONTAINER END XCPENGINE DOCKERFILE \n"


################################################################################
# CONFIGURE ENV

source ${FLYWHEEL_BASE}/docker-env.sh


##############################################################################
# Parse configuration

   # get the inputs files

if [[ -f $CONFIG_FILE ]]; then
  eval $(jq -r '.inputs | to_entries[] | "XCP_INPUT_\(.key)=\(.value.location.path)"' $CONFIG_FILE)
  echo "$(set | grep FW_INPUT)"
fi



function parse_config {

  CONFIG_FILE=$FLYWHEEL_BASE/config.json
  MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json

  if [[ -f $CONFIG_FILE ]]; then
    echo "$(cat $CONFIG_FILE | jq -r '.config.'$1)"
  else
    CONFIG_FILE=$MANIFEST_FILE
    echo "$(cat $MANIFEST_FILE | jq -r '.config.'$1'.default')"
  fi
}


################################################################################

# check the design file

if [[ -z "${DESIGNFILE}/*dsn" ]]; then
    echo -e "The design file is not supply or not available  \n!"
    echo -e " SEE https://xcpengine.readthedocs.io/config/design.html#designfile \n "
    exit 1
fi

# check fmriprep directory
if [[ $FMRIPREPDIR/*zip ]]; then 
  echo "FMRIPREP output is zip file and will be unzipped"
  fmriprepout=$(ls -f $FMRIPREPDIR/*zip)
  mkdir -p $XCP_OUTPUT_DIR/fmriprep
  unzip ${fmriprepout} -d $XCP_OUTPUT_DIR/fmriprep
fi
cohortfile=${XCP_OUTPUT_DIR}/cohortfile.csv
# make cohort file with fmriprep or image or cbf (and or mo)

if [[ -f $XCP_OUTPUT_DIR/fmriprep ]]; then 
     rm -rf ${cohortfile}  
     echo id0,id1,id2,img > ${cohortfile} # 3 ids for now 
     im=$XCP_OUTPUT_DIR/fmriprep/*/fmriprep/sub-*/ses-*/func/*desc-preproc_bold.nii.gz
     for i in  $im
         do
         id0=$(echo $i |cut -d'_' -f2)
         id1=$(echo $i |cut -d'_' -f4)
         id2=$(echo $i |cut -d'_' -f5)
         echo $id0,$id1,$id2,$i >> $cohortfile
      done
elif [[ -f ${IMG}/*nii.gz ]]; then 
      echo "The  asl image  \n"
      echo " Ensure appropriate design file is supplied \n"
      anatdir=$(ls -d $XCP_OUTPUT_DIR/fmriprep/*/fmriprep/sub-*/anat/)
      rm -rf ${cohortfile}
      cbfimg=$(ls -f ${IMG}/*nii.gz)
      echo id0,img,anatdir > $cohortfile
      echo sub-01,${cbfimg},${anatdir}>> $cohortfile  
      if [[ -f ${M0}/*/nii.gz ]]; then
      mo=$(ls -f ${M0}/*/nii.gz )
      rm -rf ${cohortfile}
      echo "${M0} is asl \n" 
      echo id0,img,anatdir,m0 > $cohortfile
      echo sub-1,${cbfimg},${anatdir},${m0}>> $cohortfile 
      fi
fi

if [[ -f ${STRUCT}/*nii.gz ]]; then
   struct=$(ls -f ${STRUCT}/*nii.gz) 
   rm -rf ${cohortfile}
   echo id0,img > $cohortfile
   echo sub-01,${struct} >> $cohortfile
fi 

################################################################################
# RUN XCPEENGINE now
designfile=$(ls -f $DESIGNFILE/*dsn)
time /xcpEngine/xcpEngine \
      -d  $designfile  \
      -c  $cohortfile  \
      -o  ${XCP_OUTPUT_DIR}/xcpengine \
      -i  ${WORKING_DIR}

rm -rf $XCP_OUTPUT_DIR/fmriprep
zip -r -q ${XCP_OUTPUT_DIR}/xcpengine xcpEngineouput.zip
rm -rf $XCP_OUTPUT_DIR/xcpengine


XCPENGINE_EXITSTATUS=$?


################################################################################
# CLEANUP OUTPUTS

if [[ XCPENGINE_EXITSTATUS == 0 ]] ; then

  echo "$CONTAINER  completed the execution. Check the log files for anyg errors."
  echo ' '
  echo ' cleaning the working directory'
  cd "$GEAR_OUTPUT_DIR"

  chmod -R 777 $GEAR_OUTPUT_DIR
else
  echo "$CONTAINER  Errors encountered during execution. cleaning the working directory: check the logfiles for report."
fi

# Clean up
rm -rf "$WORKING_DIR"

exit XCPENGINE_EXITSTATUS
